@page "/Users/Index"
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject ISnackbar Snackbar

<div style="display: flex; justify-content: flex-end;">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="RedirectNewUser">
        New User
    </MudButton>
</div>

<MudTable T="User" Items="@userList" Hover="true" OnRowClick="@(async e => await RowClickEvent(e))"
          OnRowMouseEnter="RowMouseEnterEvent" OnRowMouseLeave="RowMouseLeaveEvent" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Created at</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="CreationTime">@context.CreationTime</MudTd>
        <MudTd>
            <MudButton Color="Color.Error" @onclick="() => DeleteUser(context.Id)">
                <MudIcon Icon="@Icons.Material.Filled.Delete" Title="Favorite" />
            </MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IEnumerable<User> userList = new List<User>();

    private string currentlyHoveredElement;
    private string lastHoveredElement;

    protected override async Task OnInitializedAsync()
    {
        userList = await UserService.GetUserList();
    }

    private void RowMouseEnterEvent(TableRowHoverEventArgs<User> eventArgs)
    {
        currentlyHoveredElement = eventArgs.Item.Name;
    }

    private void RowMouseLeaveEvent(TableRowHoverEventArgs<User> eventArgs)
    {
        currentlyHoveredElement = "";
        lastHoveredElement = eventArgs.Item.Name;
    }

    private async Task RowClickEvent(TableRowClickEventArgs<User> e)
    {
        NavigationManager.NavigateTo($"/Users/Update/{e.Item.Email}");
    }

    private void RedirectNewUser()
    {
        NavigationManager.NavigateTo("/Users/Add");
    }

    private async Task DeleteUser(string id)
    {
        bool success = await UserService.DeleteUser(id);
        if (success)
        {
            Snackbar.Add("User deleted successfully", Severity.Success);
            userList = await UserService.GetUserList();
        }
        else
        {
            Snackbar.Add("Failed to delete user", Severity.Error);
        }
    }
}
